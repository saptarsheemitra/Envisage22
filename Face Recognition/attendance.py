import cv2
import numpy as np
import face_recognition
import os
from datetime import datetime
import requests
import pandas

url = 'https://www.w3schools.com/python/demopage.php'

time_now = datetime.now()
file_name = time_now.strftime('%d_%m_%Y.csv')
test = open(file_name, 'w+')
test.write("Name,Time,Date")

path = 'images'
images = []
personNames = []
uid = []
myList = os.listdir(path)
print(myList)
for cu_img in myList:
    current_Img = cv2.imread(f'{path}/{cu_img}')
    images.append(current_Img)
    personNames.append(os.path.splitext(cu_img)[0])
print(personNames)


def faceEncodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodeList.append(encode)
    return encodeList


def attendance(name):

    #if the file is not there..it wll create a new file ggwp
    with open(file_name, 'r+') as f:
        myDataList = f.readlines()
        nameList = []
        for line in myDataList:
            entry = line.split(',')
            nameList.append(entry[0])
        if name not in nameList:
            # time_now = datetime.now()
            tStr = time_now.strftime('%H:%M:%S')
            dStr = time_now.strftime('%d/%m/%Y')
            d1 = {
                "Name": name,
                "Time" : tStr,
                "Date" : dStr
            }
            print(d1)
            # requests.post(url, data = d1)
            f.writelines(f'\n{name},{tStr},{dStr}')


encodeListKnown = faceEncodings(images)
# print(encodeListKnown)
print('All Encodings Complete!!!')
# encodeListKnown = [[ 0.00212624,  0.18151706,  0.08942953, -0.02890676, -0.13226941,
#         0.04053922, -0.03351211, -0.07746178,  0.05412486, -0.05690681,
#         0.24183123, -0.05402805, -0.25743562, -0.05157364,  0.0613832 ,
#         0.12605765, -0.14946279, -0.06552804, -0.20102565, -0.06235639,
#        -0.0110338 , -0.04100168,  0.02593716, -0.07272571, -0.20662078,
#        -0.23533882, -0.04712093, -0.10228271, -0.02789488, -0.16243912,
#         0.07824215, -0.03084397, -0.14441717, -0.05164244, -0.04710121,
#        -0.02985836, -0.01722826, -0.0584734 ,  0.13154452,  0.02626333,
#        -0.17892294,  0.13025913,  0.00733513,  0.21587217,  0.29474819,
#        -0.00523588,  0.04717015, -0.08853559,  0.13626249, -0.24181871,
#         0.05437325,  0.03498966,  0.1680707 ,  0.05769799,  0.14244418,
#        -0.07317239,  0.02392226,  0.18972902, -0.20062508,  0.03737673,
#         0.05043882, -0.0548215 ,  0.03411493, -0.04349241,  0.12301467,
#         0.11024217, -0.00977706, -0.09036207,  0.19369121, -0.09519792,
#        -0.11277232,  0.0307876 , -0.06616236, -0.12772177, -0.3352626 ,
#         0.00107875,  0.27036458,  0.13602163, -0.29611105, -0.07562297,
#        -0.04549199,  0.00518061,  0.03369437,  0.00834188, -0.03430062,
#        -0.13692574, -0.05488765, -0.01437552,  0.24373627, -0.10935871,
#         0.0070437 ,  0.2237342 ,  0.04802172, -0.14844161,  0.05571188,
#        -0.03593138, -0.11785193, -0.01510649, -0.11769232, -0.05191773,
#        -0.02262584, -0.15878251, -0.03008006,  0.0665702 , -0.2624118 ,
#         0.16402596, -0.01417359, -0.07986996, -0.05631729, -0.04092158,
#         0.01244716,  0.06576459,  0.22907104, -0.24998786,  0.20107329,
#         0.2281817 , -0.05759402,  0.07731683,  0.01206536,  0.06270903,
#        -0.03904252,  0.03572973, -0.08620855, -0.13285442, -0.00430031,
#        -0.02123464,  0.00961275,  0.06677756],[-0.0914344 ,  0.13086095,  0.01314385, -0.05788445,  0.01628965,
#         0.00041327, -0.08469851, -0.09900524,  0.17989591, -0.10539678,
#         0.24560224,  0.08059315, -0.2161147 , -0.13486721,  0.04742461,
#         0.12056788, -0.16367513, -0.07826022, -0.1122469 , -0.10610124,
#         0.03652948,  0.00634994,  0.10533702,  0.04300565, -0.12117673,
#        -0.33629149, -0.06974643, -0.18218073, -0.00158545, -0.1120832 ,
#        -0.09656743, -0.02059199, -0.18194009, -0.1091411 ,  0.02073221,
#        -0.02022129,  0.00240957, -0.00374015,  0.20474017,  0.0282058 ,
#        -0.11632427,  0.09632833,  0.01547976,  0.21318354,  0.28629938,
#         0.07692298, -0.01180618, -0.09913055,  0.10386178, -0.21633516,
#         0.07274053,  0.14290063,  0.08237933,  0.04238797,  0.09769628,
#        -0.18852283,  0.00360183,  0.08834425, -0.14143489,  0.00837216,
#         0.0078872 , -0.08102693, -0.04035496,  0.0387958 ,  0.20594732,
#         0.09965956, -0.1229291 , -0.05094442,  0.13211268, -0.02900139,
#         0.02445153,  0.02434404, -0.18431334, -0.20063369, -0.22774039,
#         0.09293823,  0.37345198,  0.19359806, -0.2088118 ,  0.01955765,
#        -0.19599999,  0.02415315,  0.06105619,  0.00819598, -0.07174452,
#        -0.13538505, -0.04118638,  0.05282182,  0.0822657 ,  0.03208514,
#        -0.04098899,  0.21506976, -0.03382806,  0.06236776,  0.01853621,
#         0.05682226, -0.15838756, -0.03170495, -0.16015227, -0.06845063,
#         0.01404157, -0.04203653,  0.03085331,  0.14781639, -0.23243298,
#         0.05921936,  0.00418688, -0.04666766,  0.0222913 ,  0.07022521,
#        -0.02721735, -0.03373824,  0.05814214, -0.23816805,  0.24889056,
#         0.23403469,  0.02495461,  0.17327937,  0.07225873,  0.03394287,
#        -0.01637957, -0.02267808, -0.18229848, -0.06459411,  0.06046797,
#         0.0755232 ,  0.0852315 ,  0.00671965],[-5.94348572e-02,  1.17753856e-01,  3.73517796e-02, -8.68298262e-02,
#        -5.48617542e-03,  1.77892130e-02, -1.17904142e-01, -8.37121010e-02,
#         2.22810790e-01, -1.79745898e-01,  2.52882004e-01,  8.28868300e-02,
#        -1.58478484e-01, -1.14866085e-01,  7.69766048e-02,  1.26359925e-01,
#        -2.09321976e-01, -7.85976499e-02, -1.03819855e-01, -8.72244388e-02,
#         4.17505279e-02, -1.42008718e-03,  5.04366904e-02,  3.16852294e-02,
#        -1.49321005e-01, -3.72642696e-01, -8.23974833e-02, -1.36736140e-01,
#         1.86242126e-02, -1.51702449e-01, -7.84574449e-02, -3.00910529e-02,
#        -1.90597743e-01, -7.27553740e-02, -3.67443711e-02, -1.07236290e-02,
#         3.35361343e-04, -4.28083837e-02,  1.19522780e-01,  3.02284881e-02,
#        -9.92610678e-02,  8.70907381e-02, -2.70905457e-02,  1.64061517e-01,
#         2.86860764e-01,  7.90738165e-02,  2.12505460e-02, -7.50056282e-02,
#         1.23344362e-01, -2.09780872e-01,  2.57167034e-02,  1.13710284e-01,
#         5.37981465e-02,  2.68551372e-02,  1.03005089e-01, -1.64047420e-01,
#        -1.31584797e-03,  8.42477605e-02, -1.83390647e-01,  2.98764072e-02,
#         1.40972361e-02, -5.56386262e-02, -6.87190145e-02,  5.11844344e-02,
#         2.13456094e-01,  1.22742832e-01, -1.11955769e-01, -9.56441388e-02,
#         1.27965510e-01, -6.04673102e-02,  1.41686555e-02, -2.35393383e-02,
#        -1.52986839e-01, -2.16916740e-01, -2.06395254e-01,  6.82106689e-02,
#         3.23446244e-01,  1.77453935e-01, -1.97833464e-01,  8.60146135e-02,
#        -1.61822841e-01,  2.36844514e-02,  4.61579524e-02, -8.01838189e-03,
#        -7.09615573e-02, -7.60057196e-02, -4.69314568e-02,  6.06513098e-02,
#         9.88939255e-02,  5.64719737e-02, -1.02547435e-02,  2.46464372e-01,
#        -6.91033900e-02,  1.26198651e-02,  4.18577455e-02,  2.08157841e-02,
#        -1.62669078e-01, -1.60740968e-02, -1.21763118e-01, -8.47117677e-02,
#         6.62832037e-02, -6.04587346e-02,  7.21924799e-03,  1.00514852e-01,
#        -2.17153341e-01,  1.32877529e-01, -3.80836278e-02,  1.30557455e-04,
#         4.48988713e-02,  5.67616485e-02, -9.51901078e-02, -2.85247266e-02,
#         1.03198037e-01, -2.51681119e-01,  2.17632473e-01,  2.16781989e-01,
#         2.77376603e-02,  1.93441674e-01,  8.80715251e-02,  6.29435703e-02,
#        -1.79621242e-02,  1.27160903e-02, -1.75321057e-01, -6.55242056e-02,
#         3.21264304e-02,  3.11214142e-02,  9.15246233e-02,  9.49363038e-03],[-0.14449085,  0.04047512,  0.1150609 , -0.05369499, -0.06457123,        
#        -0.06889197, -0.0960789 , -0.0446068 ,  0.09912392, -0.1629265 ,
#         0.24113835, -0.02132495, -0.18230824, -0.15613346, -0.01967441,
#         0.14031057, -0.19574997, -0.10177891, -0.01247968, -0.06097552,
#        -0.03989654, -0.03556482,  0.0589345 ,  0.05933094, -0.11255344,
#        -0.4008221 , -0.08065827, -0.13062783,  0.03737421, -0.11115982,
#        -0.04617535,  0.03525945, -0.17938316, -0.04006603, -0.03643462,
#         0.12361585,  0.0950888 ,  0.03309321,  0.16814616,  0.03270311,
#        -0.1257015 , -0.05199812, -0.00495836,  0.28933868,  0.16675369,
#         0.12567478,  0.02285697,  0.02686555,  0.12837149, -0.22267912,
#         0.09962341,  0.0534202 ,  0.14542645, -0.07271549,  0.09784402,
#        -0.13562569,  0.0218862 ,  0.05269275, -0.15711734,  0.07993407,
#         0.03912072, -0.04726729, -0.01329639,  0.01911451,  0.32097304,
#         0.10247754, -0.09041289, -0.07964595,  0.22561464, -0.14245309,
#         0.003241  ,  0.00763992, -0.07394572, -0.07288614, -0.28844607,
#         0.02846569,  0.36049929,  0.15122853, -0.1819869 ,  0.01350424,
#        -0.1142181 , -0.03617376,  0.06205636,  0.05460467, -0.13181554,
#         0.04790605, -0.12410427,  0.00279066,  0.14862561,  0.05439258,
#        -0.01534641,  0.17710067, -0.02298191,  0.05537771,  0.0538652 ,
#        -0.09129152, -0.13078326, -0.01190442, -0.11281378, -0.02377765,
#         0.07354355, -0.09162349,  0.01730159,  0.11701631, -0.20296334,
#         0.06349421, -0.07080886, -0.03604019,  0.0336978 ,  0.13739277,
#        -0.15773909, -0.10574994,  0.13835141, -0.2240179 ,  0.14399959,
#         0.19670692,  0.04127244,  0.12954956,  0.11787105,  0.07518588,
#         0.00274094,  0.00361227, -0.11143377, -0.08688355,  0.03358426,
#        -0.11329872,  0.12424906,  0.05596644]]

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    faces = cv2.resize(frame, (0, 0), None, 0.5, 0.5)
    faces = cv2.cvtColor(faces, cv2.COLOR_BGR2RGB)

    facesCurrentFrame = face_recognition.face_locations(faces)
    encodesCurrentFrame = face_recognition.face_encodings(faces, facesCurrentFrame)

    for encodeFace, faceLoc in zip(encodesCurrentFrame, facesCurrentFrame):
        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
        faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
        # print(faceDis)
        matchIndex = np.argmin(faceDis)

        if matches[matchIndex]:
            name = personNames[matchIndex].upper()
            # print(name)
            y1, x2, y2, x1 = faceLoc
            y1, x2, y2, x1 = y1 * 2, x2 * 2, y2 * 2, x1 * 2
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.rectangle(frame, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
            cv2.putText(frame, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
            attendance(name)

    cv2.imshow('Webcam', frame)
    if cv2.waitKey(1) == 13:
        time_now = datetime.now()
        file_name = time_now.strftime('%d_%m_%Y.csv')
        file = pandas.read_csv(file_name)
        file.to_html("StudentTable.html")
        break

cap.release()
cv2.destroyAllWindows()
